"use strict";(self.webpackChunk_swan_io_docs=self.webpackChunk_swan_io_docs||[]).push([[57511],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>y});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function d(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?d(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):d(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},d=Object.keys(e);for(n=0;n<d.length;n++)a=d[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(n=0;n<d.length;n++)a=d[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,d=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=l(a),b=r,y=p["".concat(c,".").concat(b)]||p[b]||u[b]||d;return a?n.createElement(y,i(i({ref:t},s),{},{components:a})):n.createElement(y,i({ref:t},s))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var d=a.length,i=new Array(d);i[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var l=2;l<d;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}b.displayName="MDXCreateElement"},3148:(e,t,a)=>{a.r(t),a.d(t,{Badge:()=>b,Bullet:()=>p,SpecifiedBy:()=>u,assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var n=a(83117),r=a(67294),d=a(3905);const i={id:"add-received-sepa-direct-debit-b2-b-mandate-payload",title:"AddReceivedSepaDirectDebitB2bMandatePayload",hide_table_of_contents:!1},o=void 0,c={unversionedId:"api-reference/unions/add-received-sepa-direct-debit-b2-b-mandate-payload",id:"api-reference/unions/add-received-sepa-direct-debit-b2-b-mandate-payload",title:"AddReceivedSepaDirectDebitB2bMandatePayload",description:"Union type return by the addReceivedSepaDirectDebitB2bMandate mutation",source:"@site/docs/api-reference/unions/add-received-sepa-direct-debit-b2-b-mandate-payload.mdx",sourceDirName:"api-reference/unions",slug:"/api-reference/unions/add-received-sepa-direct-debit-b2-b-mandate-payload",permalink:"/api-reference/unions/add-received-sepa-direct-debit-b2-b-mandate-payload",draft:!1,editUrl:"https://github.com/swan-io/docs/edit/main/docs/docs/api-reference/unions/add-received-sepa-direct-debit-b2-b-mandate-payload.mdx",tags:[],version:"current",frontMatter:{id:"add-received-sepa-direct-debit-b2-b-mandate-payload",title:"AddReceivedSepaDirectDebitB2bMandatePayload",hide_table_of_contents:!1},sidebar:"schemaSidebar",previous:{title:"AddOrUpdateExternalAccountBalancePayload",permalink:"/api-reference/unions/add-or-update-external-account-balance-payload"},next:{title:"AddSingleUseVirtualCardPayload",permalink:"/api-reference/unions/add-single-use-virtual-card-payload"}},l={},s=[{value:"Possible types",id:"possible-types",level:3},{value:'<code>AddReceivedSepaDirectDebitB2bMandateSuccessPayload</code> <Badge class="secondary" text="object"/>',id:"addreceivedsepadirectdebitb2bmandatesuccesspayload-",level:4},{value:'<code>ForbiddenRejection</code> <Badge class="secondary" text="object"/>',id:"forbiddenrejection-",level:4},{value:'<code>AccountNotFoundRejection</code> <Badge class="secondary" text="object"/>',id:"accountnotfoundrejection-",level:4},{value:'<code>AccountHolderTypeIndividualRejection</code> <Badge class="secondary" text="object"/>',id:"accountholdertypeindividualrejection-",level:4},{value:"Returned by",id:"returned-by",level:3}],p=()=>(0,d.kt)(r.Fragment,null,(0,d.kt)("span",{style:{fontWeight:"normal",fontSize:".5em",color:"var(--ifm-color-secondary-darkest)"}},"\xa0\u25cf\xa0")),u=e=>(0,d.kt)(r.Fragment,null,"Specification",(0,d.kt)("a",{className:"link",style:{fontSize:"1.5em",paddingLeft:"4px"},target:"_blank",href:e.url,title:"Specified by "+e.url},"\u2398")),b=e=>(0,d.kt)(r.Fragment,null,(0,d.kt)("span",{className:"badge badge--"+e.class},e.text)),y={toc:s,Bullet:p,SpecifiedBy:u,Badge:b},f="wrapper";function m(e){let{components:t,...a}=e;return(0,d.kt)(f,(0,n.Z)({},y,a,{components:t,mdxType:"MDXLayout"}),(0,d.kt)("p",null,"Union type return by the addReceivedSepaDirectDebitB2bMandate mutation"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-graphql"},"union AddReceivedSepaDirectDebitB2bMandatePayload = AddReceivedSepaDirectDebitB2bMandateSuccessPayload | ForbiddenRejection | AccountNotFoundRejection | AccountHolderTypeIndividualRejection\n")),(0,d.kt)("h3",{id:"possible-types"},"Possible types"),(0,d.kt)("h4",{id:"addreceivedsepadirectdebitb2bmandatesuccesspayload-"},(0,d.kt)("a",{parentName:"h4",href:"/api-reference/objects/add-received-sepa-direct-debit-b2-b-mandate-success-payload"},(0,d.kt)("inlineCode",{parentName:"a"},"AddReceivedSepaDirectDebitB2bMandateSuccessPayload"))," ",(0,d.kt)(b,{class:"secondary",text:"object",mdxType:"Badge"})),(0,d.kt)("blockquote",null,(0,d.kt)("p",{parentName:"blockquote"},"Return type in case of a successful response of the addReceivedSepaDirectDebitB2bMandate mutation")),(0,d.kt)("h4",{id:"forbiddenrejection-"},(0,d.kt)("a",{parentName:"h4",href:"/api-reference/objects/forbidden-rejection"},(0,d.kt)("inlineCode",{parentName:"a"},"ForbiddenRejection"))," ",(0,d.kt)(b,{class:"secondary",text:"object",mdxType:"Badge"})),(0,d.kt)("blockquote",null),(0,d.kt)("h4",{id:"accountnotfoundrejection-"},(0,d.kt)("a",{parentName:"h4",href:"/api-reference/objects/account-not-found-rejection"},(0,d.kt)("inlineCode",{parentName:"a"},"AccountNotFoundRejection"))," ",(0,d.kt)(b,{class:"secondary",text:"object",mdxType:"Badge"})),(0,d.kt)("blockquote",null,(0,d.kt)("p",{parentName:"blockquote"},"Rejection returned if the account was not found or if the user does not have the rights to know that the card exists")),(0,d.kt)("h4",{id:"accountholdertypeindividualrejection-"},(0,d.kt)("a",{parentName:"h4",href:"/api-reference/objects/account-holder-type-individual-rejection"},(0,d.kt)("inlineCode",{parentName:"a"},"AccountHolderTypeIndividualRejection"))," ",(0,d.kt)(b,{class:"secondary",text:"object",mdxType:"Badge"})),(0,d.kt)("blockquote",null,(0,d.kt)("p",{parentName:"blockquote"},"Rejection returned if the account holder type is individual.\nAn individual account holder can't create a b2b received direct debit mandate.")),(0,d.kt)("h3",{id:"returned-by"},"Returned by"),(0,d.kt)("p",null,(0,d.kt)("a",{parentName:"p",href:"/api-reference/mutations/add-received-sepa-direct-debit-b2-b-mandate"},(0,d.kt)("inlineCode",{parentName:"a"},"addReceivedSepaDirectDebitB2bMandate")),"  ",(0,d.kt)(b,{class:"secondary",text:"mutation",mdxType:"Badge"})))}m.isMDXComponent=!0}}]);